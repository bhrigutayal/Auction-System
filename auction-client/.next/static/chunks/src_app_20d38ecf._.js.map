{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bhrigu/Desktop/Auction-System/auction-client/src/app/components/CountdownTimer.js"],"sourcesContent":["'use client';\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\nexport default function CountdownTimer({ endTime, onEnd, isCard = false }) {\r\n  const [timeLeft, setTimeLeft] = useState({});\r\n  const hasEndedRef = useRef(false);\r\n\r\n  const calculateTimeLeft = () => {\r\n    const difference = +new Date(endTime) - +new Date();\r\n    let timeLeft = {};\r\n\r\n    if (difference > 0) {\r\n      timeLeft = {\r\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n        minutes: Math.floor((difference / 1000 / 60) % 60),\r\n        seconds: Math.floor((difference / 1000) % 60),\r\n      };\r\n    }\r\n    return timeLeft;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTimeLeft(calculateTimeLeft());\r\n  }, [endTime]);\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      const newTimeLeft = calculateTimeLeft();\r\n      setTimeLeft(newTimeLeft);\r\n      \r\n      // Only call onEnd once when auction ends\r\n      if (Object.keys(newTimeLeft).length === 0 && !hasEndedRef.current && onEnd) {\r\n        hasEndedRef.current = true;\r\n        onEnd();\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [timeLeft, onEnd, endTime]);\r\n\r\n  const timerComponents = [];\r\n\r\n  Object.keys(timeLeft).forEach((interval) => {\r\n    if (!timeLeft[interval] && interval !== 'seconds' && interval !== 'minutes') {\r\n      return;\r\n    }\r\n    timerComponents.push(\r\n      <span key={interval}>\r\n        {String(timeLeft[interval]).padStart(2, '0')}{interval.charAt(0)}\r\n      </span>\r\n    );\r\n  });\r\n  \r\n  const timeString = `${String(timeLeft.hours || 0).padStart(2, '0')}:${String(timeLeft.minutes || 0).padStart(2, '0')}:${String(timeLeft.seconds || 0).padStart(2, '0')}`;\r\n\r\n  if (isCard) {\r\n    const isUrgent = timeLeft.hours === 0 && timeLeft.minutes < 30;\r\n    return (\r\n      <div className={`font-bold ${isUrgent ? 'text-red-600' : 'text-gray-800'}`}>\r\n        {timeLeft.days > 0 ? `${timeLeft.days}d ` : ''}{timeString}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"text-2xl font-bold text-red-600 tabular-nums\">\r\n      {timerComponents.length ? timeString : <span>Time's up!</span>}\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AACA;;;AADA;;AAGe,SAAS,eAAe,KAAkC;QAAlC,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS,KAAK,EAAE,GAAlC;;IACrC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE,CAAC;IAC1C,MAAM,cAAc,CAAA,GAAA,6JAAA,CAAA,SAAM,AAAD,EAAE;IAE3B,MAAM,oBAAoB;QACxB,MAAM,aAAa,CAAC,IAAI,KAAK,WAAW,CAAC,IAAI;QAC7C,IAAI,WAAW,CAAC;QAEhB,IAAI,aAAa,GAAG;YAClB,WAAW;gBACT,MAAM,KAAK,KAAK,CAAC,aAAa,CAAC,OAAO,KAAK,KAAK,EAAE;gBAClD,OAAO,KAAK,KAAK,CAAC,AAAC,aAAa,CAAC,OAAO,KAAK,EAAE,IAAK;gBACpD,SAAS,KAAK,KAAK,CAAC,AAAC,aAAa,OAAO,KAAM;gBAC/C,SAAS,KAAK,KAAK,CAAC,AAAC,aAAa,OAAQ;YAC5C;QACF;QACA,OAAO;IACT;IAEA,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;oCAAE;YACR,YAAY;QACd;mCAAG;QAAC;KAAQ;IAEZ,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;oCAAE;YACR,MAAM,QAAQ;kDAAW;oBACvB,MAAM,cAAc;oBACpB,YAAY;oBAEZ,yCAAyC;oBACzC,IAAI,OAAO,IAAI,CAAC,aAAa,MAAM,KAAK,KAAK,CAAC,YAAY,OAAO,IAAI,OAAO;wBAC1E,YAAY,OAAO,GAAG;wBACtB;oBACF;gBACF;iDAAG;YAEH;4CAAO,IAAM,aAAa;;QAC5B;mCAAG;QAAC;QAAU;QAAO;KAAQ;IAE7B,MAAM,kBAAkB,EAAE;IAE1B,OAAO,IAAI,CAAC,UAAU,OAAO,CAAC,CAAC;QAC7B,IAAI,CAAC,QAAQ,CAAC,SAAS,IAAI,aAAa,aAAa,aAAa,WAAW;YAC3E;QACF;QACA,gBAAgB,IAAI,eAClB,6LAAC;;gBACE,OAAO,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,GAAG;gBAAM,SAAS,MAAM,CAAC;;WADrD;;;;;IAIf;IAEA,MAAM,aAAa,AAAC,GAAkD,OAAhD,OAAO,SAAS,KAAK,IAAI,GAAG,QAAQ,CAAC,GAAG,MAAK,KAAqD,OAAlD,OAAO,SAAS,OAAO,IAAI,GAAG,QAAQ,CAAC,GAAG,MAAK,KAAkD,OAA/C,OAAO,SAAS,OAAO,IAAI,GAAG,QAAQ,CAAC,GAAG;IAElK,IAAI,QAAQ;QACV,MAAM,WAAW,SAAS,KAAK,KAAK,KAAK,SAAS,OAAO,GAAG;QAC5D,qBACE,6LAAC;YAAI,WAAW,AAAC,aAAwD,OAA5C,WAAW,iBAAiB;;gBACtD,SAAS,IAAI,GAAG,IAAI,AAAC,GAAgB,OAAd,SAAS,IAAI,EAAC,QAAM;gBAAI;;;;;;;IAGtD;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACZ,gBAAgB,MAAM,GAAG,2BAAa,6LAAC;sBAAK;;;;;;;;;;;AAGnD;GAnEwB;KAAA","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Bhrigu/Desktop/Auction-System/auction-client/src/app/auction/%5Bid%5D/page.tsx"],"sourcesContent":["'use client';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { useParams } from 'next/navigation';\r\nimport io, { Socket } from 'socket.io-client';\r\nimport { supabase } from '@/lib/supabaseClient';\r\nimport CountdownTimer from '@/app/components/CountdownTimer';\r\nimport { toast } from 'react-hot-toast';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport Link from 'next/link';\r\n\r\n// Update the socket URL for production\r\nconst SOCKET_URL = process.env.NODE_ENV === 'production' \r\n  ? window.location.origin.replace('https://', 'wss://').replace('http://', 'ws://')\r\n  : 'http://localhost:3001';\r\n\r\ninterface Auction {\r\n  id: string;\r\n  item_name: string;\r\n  description: string;\r\n  starting_price: number;\r\n  bid_increment: number;\r\n  highest_bid: number;\r\n  highest_bidder_id: string;\r\n  start_time: string;\r\n  end_time: string;\r\n  seller_id: string;\r\n  image_url?: string;\r\n  imageUrl: string;\r\n}\r\n\r\ninterface PostBidAction {\r\n  id: string;\r\n  auction_id: string;\r\n  seller_id: string;\r\n  bidder_id: string;\r\n  action_type: 'pending' | 'accepted' | 'rejected' | 'counter_offer';\r\n  status: 'pending' | 'completed';\r\n  counter_amount?: number;\r\n  message?: string;\r\n  created_at: string;\r\n}\r\n\r\nexport default function AuctionPage() {\r\n  const params = useParams();\r\n  const auctionId = params.id as string;\r\n  const socketRef = useRef<Socket | null>(null);\r\n  const { user, session } = useAuth();\r\n\r\n  const [auction, setAuction] = useState<Auction | null>(null);\r\n  const [highestBid, setHighestBid] = useState(0);\r\n  const [bidAmount, setBidAmount] = useState('');\r\n  const [isAuctionEnded, setIsAuctionEnded] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [sellerDecision, setSellerDecision] = useState<'accepted' | 'rejected' | 'counter' | null>(null);\r\n  const [counterOffer, setCounterOffer] = useState('');\r\n  const [postBidAction, setPostBidAction] = useState<PostBidAction | null>(null);\r\n  const [showPostBidActions, setShowPostBidActions] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!auctionId) return;\r\n\r\n    const getAuctionDetails = async () => {\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('auctions')\r\n          .select('*')\r\n          .eq('id', auctionId)\r\n          .single();\r\n\r\n        if (error || !data) {\r\n          console.error('Error fetching auction details:', error);\r\n          toast.error(\"Could not load auction details.\");\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n\r\n        const formattedData: Auction = {\r\n          ...data,\r\n          imageUrl: data.image_url || `https://placehold.co/600x400/gray/white?text=${data.item_name.replace(/\\s/g, '+')}`\r\n        };\r\n\r\n        setAuction(formattedData);\r\n        setHighestBid(data.highest_bid || data.starting_price);\r\n        setBidAmount((data.highest_bid + data.bid_increment || data.starting_price + data.bid_increment).toString());\r\n        \r\n        if (new Date(formattedData.end_time) <= new Date()) {\r\n          setIsAuctionEnded(true);\r\n          // Check if there are post-bid actions AFTER setting auction data\r\n          setTimeout(() => {\r\n            checkPostBidActions();\r\n          }, 100);\r\n        }\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error in getAuctionDetails:', error);\r\n        toast.error(\"Failed to load auction details.\");\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    getAuctionDetails();\r\n  }, [auctionId]);\r\n\r\n  useEffect(() => {\r\n    if (!auctionId) return;\r\n\r\n    const checkPostBidActions = async () => {\r\n      if (!user || !auction) return;\r\n      \r\n      try {\r\n        // Check for ANY post-bid action (not just pending ones)\r\n        const { data, error } = await supabase\r\n          .from('post_bid_actions')\r\n          .select('*')\r\n          .eq('auction_id', auctionId)\r\n          .single();\r\n\r\n        if (data && !error) {\r\n          console.log('Found existing post-bid action:', data);\r\n          setPostBidAction(data);\r\n          setShowPostBidActions(true);\r\n          return; // Don't create anything if one exists\r\n        } else {\r\n          console.log('No post-bid actions found');\r\n          // Only create if auction ended, has a highest bidder, and no action exists\r\n          if (isAuctionEnded && auction.highest_bidder_id) {\r\n            // Double-check if action already exists before creating\r\n            const { data: existingAction } = await supabase\r\n              .from('post_bid_actions')\r\n              .select('id')\r\n              .eq('auction_id', auctionId)\r\n              .single();\r\n            \r\n            if (!existingAction) {\r\n              console.log('Creating new post-bid action...');\r\n              await createPostBidAction();\r\n            } else {\r\n              console.log('Post-bid action found on second check:', existingAction);\r\n              // Fetch the full action data\r\n              const { data: fullAction } = await supabase\r\n                .from('post_bid_actions')\r\n                .select('*')\r\n                .eq('id', existingAction.id)\r\n                .single();\r\n              \r\n              if (fullAction) {\r\n                setPostBidAction(fullAction);\r\n                setShowPostBidActions(true);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log('Error checking post-bid actions:', error);\r\n        // Don't create anything on error - just show the error\r\n        toast.error('Failed to load post-bid actions');\r\n      }\r\n    };\r\n\r\n    if (session) {\r\n      try {\r\n        socketRef.current = io(SOCKET_URL, {\r\n          auth: { token: session.access_token },\r\n          transports: ['websocket'] \r\n        });\r\n\r\n        socketRef.current.on('connect', () => {\r\n          console.log('Socket connected successfully');\r\n          if (socketRef.current) {\r\n            socketRef.current.emit('joinAuction', auctionId);\r\n          }\r\n        });\r\n\r\n        socketRef.current.on('connect_error', (err: any) => {\r\n          console.error('Socket connection error:', err);\r\n          toast.error(`Socket connection failed: ${err.message}`);\r\n        });\r\n\r\n        socketRef.current.on('error', (errorMessage: string) => {\r\n          console.error('Socket error:', errorMessage);\r\n          toast.error(errorMessage);\r\n        });\r\n\r\n        // Listen for bid updates from other users FIRST - this ensures instant updates\r\n        socketRef.current.on('bidUpdate', (data: { highestBid: number; highestBidderId: string; auctionId: string }) => {\r\n          console.log('Bid update received:', data);\r\n          if (data.highestBid > highestBid) {\r\n            setHighestBid(data.highestBid);\r\n            setBidAmount((data.highestBid + (auction?.bid_increment || 1)).toString());\r\n            // Show notification for other users' bids\r\n            if (data.highestBidderId !== user?.id) {\r\n              toast.success(`New highest bid: $${data.highestBid}`);\r\n            }\r\n          }\r\n        });\r\n\r\n        socketRef.current.on('bidSuccess', (data: { bidAmount: number; auctionId: string }) => {\r\n          console.log('Bid successful:', data);\r\n          toast.success(`Bid placed successfully! Amount: $${data.bidAmount}`);\r\n          // Update the highest bid locally immediately\r\n          setHighestBid(data.bidAmount);\r\n          setBidAmount((data.bidAmount + (auction?.bid_increment || 1)).toString());\r\n          // Dismiss the loading toast\r\n          toast.dismiss('bid-loading');\r\n        });\r\n\r\n        socketRef.current.on('outbidNotification', ({ user: outbidUserId }: { user: string }) => {\r\n          if (user && outbidUserId === user.id) {\r\n            toast.error(\"You've been outbid!\");\r\n          }\r\n        });\r\n\r\n        // Listen for seller bid notifications\r\n        socketRef.current.on('sellerBidNotification', (data: { \r\n          sellerId: string; \r\n          auctionId: string; \r\n          itemName: string; \r\n          newHighestBid: number; \r\n          bidderId: string \r\n        }) => {\r\n          console.log('Seller notification received:', data);\r\n          console.log('Current user ID:', user?.id);\r\n          console.log('Seller ID from notification:', data.sellerId);\r\n          \r\n          // Only show notification if current user is the seller\r\n          if (user && user.id === data.sellerId) {\r\n            console.log('Showing seller notification');\r\n            toast.success(\r\n              `New highest bid on \"${data.itemName}\": $${data.newHighestBid.toLocaleString()}!`, \r\n              { \r\n                duration: 6000,\r\n                icon: '💰'\r\n              }\r\n            );\r\n          } else {\r\n            console.log('User is not the seller or user not logged in');\r\n          }\r\n        });\r\n\r\n        // Listen for post-bid action updates\r\n        socketRef.current.on('postBidActionUpdate', (data: PostBidAction) => {\r\n          console.log('Post-bid action update received:', data);\r\n          setPostBidAction(data);\r\n          setShowPostBidActions(true);\r\n          \r\n          // Don't show toasts here - they will be handled by specific notifications\r\n        });\r\n\r\n        // Listen for bid acceptance notifications (only for highest bidder)\r\n        socketRef.current.on('bidAcceptedNotification', (data: { \r\n          actionId: string; \r\n          auctionId: string \r\n        }) => {\r\n          console.log('Bid accepted notification received:', data);\r\n          \r\n          // Only show for the highest bidder\r\n          if (user && auction && user.id === auction.highest_bidder_id) {\r\n            toast.success('🎉 Your bid has been accepted by the seller!', {\r\n              duration: 8000,\r\n              icon: '✅'\r\n            });\r\n            \r\n            // Update the post-bid action to show accepted\r\n            if (postBidAction) {\r\n              setPostBidAction({\r\n                ...postBidAction,\r\n                action_type: 'accepted',\r\n                status: 'completed'\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        // Listen for bid rejection notifications (only for highest bidder)\r\n        socketRef.current.on('bidRejectedNotification', (data: { \r\n          actionId: string; \r\n          auctionId: string \r\n        }) => {\r\n          console.log('Bid rejected notification received:', data);\r\n          \r\n          // Only show for the highest bidder\r\n          if (user && auction && user.id === auction.highest_bidder_id) {\r\n            toast.error('❌ Your bid has been rejected by the seller.', {\r\n              duration: 8000,\r\n              icon: '❌'\r\n            });\r\n            \r\n            // Update the post-bid action to show rejected\r\n            if (postBidAction) {\r\n              setPostBidAction({\r\n                ...postBidAction,\r\n                action_type: 'rejected',\r\n                status: 'completed'\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        // Listen for counter offer notifications (only for highest bidder)\r\n        socketRef.current.on('counterOfferNotification', (data: { \r\n          actionId: string; \r\n          counterAmount: number; \r\n          auctionId: string \r\n        }) => {\r\n          console.log('Counter offer notification received:', data);\r\n          \r\n          // Only show for the highest bidder\r\n          if (user && auction && user.id === auction.highest_bidder_id) {\r\n            toast.success(`💰 Seller has made a counter-offer: $${data.counterAmount}`, {\r\n              duration: 8000,\r\n              icon: '💰'\r\n            });\r\n            \r\n            // Update the post-bid action to show counter offer\r\n            if (postBidAction) {\r\n              setPostBidAction({\r\n                ...postBidAction,\r\n                action_type: 'counter_offer',\r\n                counter_amount: data.counterAmount,\r\n                status: 'pending'\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        // Listen for counter offer response notifications (only for seller)\r\n        socketRef.current.on('counterOfferResponseNotification', (data: { \r\n          actionId: string; \r\n          response: string; \r\n          message: string; \r\n          auctionId: string \r\n        }) => {\r\n          console.log('Counter offer response notification received:', data);\r\n          \r\n          // Only show for the seller\r\n          if (user && auction && user.id === auction.seller_id) {\r\n            if (data.response === 'accepted') {\r\n              toast.success('✅ The bidder accepted your counter-offer!', {\r\n                duration: 8000,\r\n                icon: '✅'\r\n              });\r\n            } else {\r\n              toast.error('❌ The bidder rejected your counter-offer.', {\r\n                duration: 8000,\r\n                icon: '❌'\r\n              });\r\n            }\r\n            \r\n            // Update the post-bid action to show the response\r\n            if (postBidAction) {\r\n              setPostBidAction({\r\n                ...postBidAction,\r\n                status: 'completed',\r\n                message: data.message\r\n              });\r\n            }\r\n          }\r\n        });\r\n\r\n        // Listen for transaction completion notifications\r\n        socketRef.current.on('transactionCompleted', (data: { \r\n          auctionId: string; \r\n          finalAmount: number; \r\n          buyerEmail: string; \r\n          sellerEmail: string \r\n        }) => {\r\n          console.log('Transaction completed:', data);\r\n          \r\n          // Show success message to both buyer and seller\r\n          if (user && auction) {\r\n            if (user.id === auction.highest_bidder_id) {\r\n              toast.success(`🎉 Transaction completed! Invoice sent to ${data.buyerEmail}`, {\r\n                duration: 10000,\r\n                icon: '📧'\r\n              });\r\n            } else if (user.id === auction.seller_id) {\r\n              toast.success(`🎉 Transaction completed! Invoice sent to ${data.sellerEmail}`, {\r\n                duration: 10000,\r\n                icon: '📧'\r\n              });\r\n            }\r\n          }\r\n          \r\n          // Update the post-bid action to show completed\r\n          if (postBidAction) {\r\n            setPostBidAction({\r\n              ...postBidAction,\r\n              status: 'completed',\r\n              message: `Transaction completed successfully. Final amount: $${data.finalAmount.toLocaleString()}`\r\n            });\r\n          }\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('Error setting up socket:', error);\r\n        toast.error(\"Failed to establish connection. Please refresh the page.\");\r\n      }\r\n    }\r\n\r\n    // Set up real-time subscription for instant updates\r\n    const channel = supabase\r\n      .channel(`auction-${auctionId}`)\r\n      .on('postgres_changes', { \r\n        event: 'UPDATE', \r\n        schema: 'public', \r\n        table: 'auctions', \r\n        filter: `id=eq.${auctionId}` \r\n      },\r\n        (payload) => {\r\n          const newHighestBid = payload.new.highest_bid;\r\n          if (newHighestBid && newHighestBid > highestBid) {\r\n            console.log('Real-time update received:', newHighestBid);\r\n            toast.success(`New highest bid: $${newHighestBid}`);\r\n            setHighestBid(newHighestBid);\r\n            setBidAmount((newHighestBid + (auction?.bid_increment || 1)).toString());\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n      if (socketRef.current) {\r\n        socketRef.current.disconnect();\r\n      }\r\n    };\r\n  }, [auctionId, session, auction?.bid_increment]);\r\n\r\n  const handlePlaceBid = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!user) {\r\n      return toast.error(\"Please log in to place a bid.\");\r\n    }\r\n    \r\n    if (!socketRef.current || !socketRef.current.connected) {\r\n      return toast.error(\"Connection not established. Please refresh the page.\");\r\n    }\r\n    \r\n    if (!auction) {\r\n      return toast.error(\"Auction data not loaded.\");\r\n    }\r\n\r\n    // Check if user is the seller\r\n    if (user.id === auction.seller_id) {\r\n      return toast.error(\"Sellers cannot place bids on their own auctions.\");\r\n    }\r\n    \r\n    const newBid = parseFloat(bidAmount);\r\n    if (isNaN(newBid)) {\r\n      return toast.error(\"Please enter a valid bid amount.\");\r\n    }\r\n    \r\n    const minBid = highestBid + auction.bid_increment;\r\n    if (newBid < minBid) {\r\n      return toast.error(`Your bid must be at least $${minBid.toFixed(2)}`);\r\n    }\r\n    \r\n    try {\r\n      console.log('Emitting bid:', { auctionId, bidAmount: newBid });\r\n      \r\n      // Show loading state\r\n      toast.loading('Placing your bid...', { id: 'bid-loading' });\r\n      \r\n      // Emit the bid event\r\n      socketRef.current.emit('placeBid', {\r\n        auctionId,\r\n        bidAmount: newBid,\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error('Error placing bid:', error);\r\n      toast.error('Failed to place bid. Please try again.');\r\n      toast.dismiss('bid-loading');\r\n    }\r\n  };\r\n\r\n  const handleAuctionEnd = () => {\r\n    setIsAuctionEnded(true);\r\n    toast.success(\"The auction has ended!\");\r\n    // Check for post-bid actions after a short delay\r\n    setTimeout(() => {\r\n      checkPostBidActions();\r\n    }, 1000);\r\n  };\r\n\r\n  const checkPostBidActions = async () => {\r\n    if (!user || !auction) return;\r\n    \r\n    try {\r\n      console.log('Checking for post-bid actions...');\r\n      // Check for ANY post-bid action (not just pending ones)\r\n      const { data, error } = await supabase\r\n        .from('post_bid_actions')\r\n        .select('*')\r\n        .eq('auction_id', auctionId)\r\n        .single();\r\n\r\n      if (data && !error) {\r\n        console.log('Found existing post-bid action:', data);\r\n        setPostBidAction(data);\r\n        setShowPostBidActions(true);\r\n        return; // Don't create anything if one exists\r\n      } else {\r\n        console.log('No post-bid actions found');\r\n        // Only create if auction ended, has a highest bidder, and no action exists\r\n        if (isAuctionEnded && auction.highest_bidder_id) {\r\n          // Double-check if action already exists before creating\r\n          const { data: existingAction } = await supabase\r\n            .from('post_bid_actions')\r\n            .select('id')\r\n            .eq('auction_id', auctionId)\r\n            .single();\r\n          \r\n          if (!existingAction) {\r\n            console.log('Creating new post-bid action...');\r\n            await createPostBidAction();\r\n          } else {\r\n            console.log('Post-bid action found on second check:', existingAction);\r\n            // Fetch the full action data\r\n            const { data: fullAction } = await supabase\r\n              .from('post_bid_actions')\r\n              .select('*')\r\n              .eq('id', existingAction.id)\r\n              .single();\r\n            \r\n            if (fullAction) {\r\n              setPostBidAction(fullAction);\r\n              setShowPostBidActions(true);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log('Error checking post-bid actions:', error);\r\n      // Don't create anything on error - just show the error\r\n      toast.error('Failed to load post-bid actions');\r\n    }\r\n  };\r\n\r\n  const createPostBidAction = async () => {\r\n    if (!auction || !auction.highest_bidder_id) return;\r\n    \r\n    try {\r\n      // Final check if action already exists before creating\r\n      const { data: existingAction } = await supabase\r\n        .from('post_bid_actions')\r\n        .select('id')\r\n        .eq('auction_id', auctionId)\r\n        .single();\r\n      \r\n      if (existingAction) {\r\n        console.log('Post-bid action already exists, not creating duplicate');\r\n        // Fetch the existing action instead\r\n        const { data: fullAction } = await supabase\r\n          .from('post_bid_actions')\r\n          .select('*')\r\n          .eq('id', existingAction.id)\r\n          .single();\r\n        \r\n        if (fullAction) {\r\n          setPostBidAction(fullAction);\r\n          setShowPostBidActions(true);\r\n        }\r\n        return;\r\n      }\r\n\r\n      console.log('Creating new post-bid action...');\r\n      const { data, error } = await supabase\r\n        .from('post_bid_actions')\r\n        .insert({\r\n          auction_id: auctionId,\r\n          seller_id: auction.seller_id,\r\n          bidder_id: auction.highest_bidder_id,\r\n          action_type: 'pending',\r\n          status: 'pending'\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (data && !error) {\r\n        console.log('Created post-bid action:', data);\r\n        setPostBidAction(data);\r\n        setShowPostBidActions(true);\r\n      } else {\r\n        console.error('Error creating post-bid action:', error);\r\n        toast.error('Failed to create post-bid action');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating post-bid action:', error);\r\n      toast.error('Failed to create post-bid action');\r\n    }\r\n  };\r\n\r\n  const handleSellerAction = async (action: 'accepted' | 'rejected' | 'counter') => {\r\n    if (!user || !auction || !postBidAction) return;\r\n\r\n    try {\r\n      let updateData: any = {\r\n        action_type: action === 'counter' ? 'counter_offer' : action,\r\n        status: 'completed'\r\n      };\r\n\r\n      if (action === 'counter' && counterOffer) {\r\n        updateData.counter_amount = parseFloat(counterOffer);\r\n        updateData.message = `Seller counter-offer: $${counterOffer}`;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('post_bid_actions')\r\n        .update(updateData)\r\n        .eq('id', postBidAction.id);\r\n\r\n      if (error) {\r\n        toast.error('Failed to update action. Please try again.');\r\n        return;\r\n      }\r\n\r\n      // Emit the update to the backend\r\n      if (socketRef.current) {\r\n        socketRef.current.emit('updatePostBidAction', {\r\n          actionId: postBidAction.id,\r\n          actionType: action === 'counter' ? 'counter_offer' : action,\r\n          counterAmount: action === 'counter' ? parseFloat(counterOffer) : null\r\n        });\r\n      }\r\n\r\n      setSellerDecision(action);\r\n      \r\n      if (action === 'counter') {\r\n        toast.success(`Counter-offer sent: $${counterOffer}`);\r\n      } else {\r\n        toast.success(`Bid ${action} successfully!`);\r\n      }\r\n      \r\n      // Reset form\r\n      setCounterOffer('');\r\n      \r\n      // Don't hide the post-bid actions yet - wait for the response\r\n\r\n    } catch (error) {\r\n      console.error('Error handling seller action:', error);\r\n      toast.error('Failed to process action. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleBidderResponse = async (response: 'accepted' | 'rejected') => {\r\n    if (!user || !postBidAction) return;\r\n\r\n    try {\r\n      const message = response === 'accepted' \r\n        ? `Bidder accepted the counter-offer of $${postBidAction.counter_amount}`\r\n        : `Bidder rejected the counter-offer of $${postBidAction.counter_amount}`;\r\n\r\n      const { error } = await supabase\r\n        .from('post_bid_actions')\r\n        .update({\r\n          status: 'completed',\r\n          message: message,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', postBidAction.id);\r\n\r\n      if (error) {\r\n        toast.error('Failed to update response. Please try again.');\r\n        return;\r\n      }\r\n\r\n      // Emit the response to the backend\r\n      if (socketRef.current) {\r\n        socketRef.current.emit('respondToCounterOffer', {\r\n          actionId: postBidAction.id,\r\n          response: response,\r\n          message: message\r\n        });\r\n      }\r\n\r\n      toast.success(`Response recorded: ${response}`);\r\n      \r\n      // Update local state\r\n      setPostBidAction(prev => prev ? {\r\n        ...prev,\r\n        status: 'completed',\r\n        message: message\r\n      } : null);\r\n\r\n    } catch (error) {\r\n      console.error('Error handling bidder response:', error);\r\n      toast.error('Failed to process response. Please try again.');\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\r\n          <p className=\"text-gray-600 font-semibold\">Loading Auction...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (!auction) {\r\n    return (\r\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Auction not found.</h2>\r\n          <p className=\"text-gray-600\">The auction you're looking for doesn't exist.</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const isSeller = user && auction && user.id === auction.seller_id;\r\n  const isHighestBidder = user && auction && user.id === auction.highest_bidder_id;\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 py-12\">\r\n      <div className=\"max-w-6xl mx-auto px-4\">\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-12\">\r\n          <div className=\"bg-white p-6 rounded-2xl shadow-xl border border-gray-100\">\r\n            <img src={auction.imageUrl} alt={auction.item_name} className=\"w-full h-auto object-cover rounded-xl\" />\r\n          </div>\r\n          <div className=\"bg-white p-8 rounded-2xl shadow-xl border border-gray-100\">\r\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">{auction.item_name}</h1>\r\n            <p className=\"text-gray-700 text-lg mb-8 leading-relaxed\">{auction.description}</p>\r\n            \r\n            <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-xl mb-8 border border-blue-100\">\r\n              <div className=\"flex justify-between items-center mb-4\">\r\n                <span className=\"text-lg font-semibold text-gray-800\">Current Highest Bid</span>\r\n                <span className=\"text-3xl font-bold text-blue-600\">${highestBid.toLocaleString()}</span>\r\n              </div>\r\n              <div className=\"flex justify-between items-center\">\r\n                <span className=\"text-lg font-semibold text-gray-800\">Auction Ends In</span>\r\n                <CountdownTimer endTime={auction.end_time} onEnd={handleAuctionEnd} />\r\n              </div>\r\n            </div>\r\n            \r\n            {!isAuctionEnded ? (\r\n              user ? (\r\n                isSeller ? (\r\n                  // Seller view - show current bid info only\r\n                  <div className=\"text-center p-6 bg-green-50 rounded-xl border border-green-200\">\r\n                    <div className=\"text-green-800 mb-4\">\r\n                      <h3 className=\"text-xl font-bold mb-2\">You are the seller of this auction</h3>\r\n                      <p className=\"text-lg\">Current highest bid: <span className=\"font-bold text-green-600\">${highestBid.toLocaleString()}</span></p>\r\n                      <p className=\"text-sm mt-2\">You cannot place bids on your own auction</p>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  // Regular user view - show bidding form\r\n                  <form onSubmit={handlePlaceBid} className=\"space-y-4\">\r\n                    <label htmlFor=\"bid\" className=\"block text-sm font-semibold text-gray-800 mb-2\">\r\n                      Your Bid (min. ${(highestBid + auction.bid_increment).toFixed(2)})\r\n                    </label>\r\n                    <div className=\"flex gap-4\">\r\n                      <input \r\n                        id=\"bid\" \r\n                        type=\"number\" \r\n                        value={bidAmount} \r\n                        onChange={(e) => setBidAmount(e.target.value)} \r\n                        className=\"flex-grow p-4 border-2 border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-gray-900 placeholder-gray-500\" \r\n                        step={auction.bid_increment} \r\n                        min={highestBid + auction.bid_increment} \r\n                        placeholder={`Enter bid amount`}\r\n                      />\r\n                      <button \r\n                        type=\"submit\" \r\n                        className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white font-bold py-4 px-8 rounded-xl hover:from-blue-700 hover:to-purple-700 transition-all duration-200 transform hover:scale-105 shadow-lg\"\r\n                      >\r\n                        Place Bid\r\n                      </button>\r\n                    </div>\r\n                  </form>\r\n                )\r\n              ) : (\r\n                <div className=\"text-center p-6 bg-gray-100 rounded-xl border border-gray-200\">\r\n                  <p className=\"font-semibold text-gray-800\">Please <Link href=\"/login\" className=\"text-blue-600 hover:underline\">log in</Link> to place a bid.</p>\r\n                </div>\r\n              )\r\n            ) : (\r\n              <div className=\"text-center p-6 bg-yellow-100 border-l-4 border-yellow-500 rounded-r-xl\">\r\n                <h3 className=\"text-2xl font-bold text-yellow-800\">Auction Ended</h3>\r\n                <p className=\"text-lg mt-2 text-yellow-700\">Final Bid: <span className=\"font-bold\">${highestBid.toLocaleString()}</span></p>\r\n              </div>\r\n            )}\r\n            \r\n            {/* Post-Bid Actions Section - ONLY SHOW TO SELLER AND HIGHEST BIDDER */}\r\n            {isAuctionEnded && (isSeller || isHighestBidder) && (\r\n              <div className=\"mt-8 p-6 bg-blue-50 border-blue-400 border rounded-xl\">\r\n                <h3 className=\"text-xl font-bold mb-4 text-center text-blue-800\">Post-Bid Actions</h3>\r\n                \r\n                {!postBidAction ? (\r\n                  // Loading or no action yet\r\n                  <div className=\"text-center\">\r\n                    <p className=\"text-blue-700\">Loading post-bid actions...</p>\r\n                    <button \r\n                      onClick={checkPostBidActions}\r\n                      className=\"mt-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\r\n                    >\r\n                      Refresh\r\n                    </button>\r\n                  </div>\r\n                ) : isSeller && postBidAction.status === 'pending' ? (\r\n                  // Seller actions - only show if status is pending\r\n                  <div className=\"space-y-4\">\r\n                    <p className=\"text-center text-blue-700\">\r\n                      The auction ended with a bid of ${highestBid}. What would you like to do?\r\n                    </p>\r\n                    <div className=\"flex justify-center gap-4\">\r\n                      <button \r\n                        onClick={() => handleSellerAction('accepted')} \r\n                        className=\"bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors\"\r\n                      >\r\n                        Accept Bid\r\n                      </button>\r\n                      <button \r\n                        onClick={() => handleSellerAction('rejected')} \r\n                        className=\"bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition-colors\"\r\n                      >\r\n                        Reject Bid\r\n                      </button>\r\n                      <button \r\n                        onClick={() => setSellerDecision('counter')} \r\n                        className=\"bg-yellow-500 text-white px-6 py-2 rounded-lg hover:bg-yellow-600 transition-colors\"\r\n                      >\r\n                        Counter-Offer\r\n                      </button>\r\n                    </div>\r\n                    \r\n                    {sellerDecision === 'counter' && (\r\n                      <div className=\"mt-4\">\r\n                        <input \r\n                          type=\"number\" \r\n                          placeholder=\"Enter counter-offer amount\" \r\n                          className=\"w-full p-3 border-2 border-gray-300 rounded-lg text-gray-900 placeholder-gray-500\" \r\n                          value={counterOffer}\r\n                          onChange={(e) => setCounterOffer(e.target.value)} \r\n                        />\r\n                        <button \r\n                          onClick={() => handleSellerAction('counter')}\r\n                          className=\"w-full mt-2 bg-blue-600 text-white p-3 rounded-lg hover:bg-blue-700 transition-colors\"\r\n                        >\r\n                          Send Counter-Offer\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ) : isHighestBidder && postBidAction.status === 'pending' ? (\r\n                  // Bidder actions - only show if status is pending\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"text-center\">\r\n                      {postBidAction.action_type === 'accepted' && (\r\n                        <div className=\"text-green-700\">\r\n                          <h4 className=\"text-lg font-bold mb-2\">🎉 Your bid has been accepted!</h4>\r\n                          <p className=\"text-sm\">The seller has accepted your bid of ${highestBid}</p>\r\n                        </div>\r\n                      )}\r\n                      {postBidAction.action_type === 'rejected' && (\r\n                        <div className=\"text-red-700\">\r\n                          <h4 className=\"text-lg font-bold mb-2\">❌ Your bid has been rejected</h4>\r\n                          <p className=\"text-sm\">The seller has rejected your bid of ${highestBid}</p>\r\n                        </div>\r\n                      )}\r\n                      {postBidAction.action_type === 'counter_offer' && (\r\n                        <div className=\"text-blue-700\">\r\n                          <h4 className=\"text-lg font-bold mb-2\">💰 Counter-Offer Received!</h4>\r\n                          <p className=\"text-lg mb-4\">The seller has made a counter-offer: <span className=\"font-bold text-blue-600\">${postBidAction.counter_amount}</span></p>\r\n                          <p className=\"text-sm text-gray-600 mb-4\">Would you like to accept or reject this offer?</p>\r\n                          \r\n                          <div className=\"flex justify-center gap-4\">\r\n                            <button \r\n                              onClick={() => handleBidderResponse('accepted')} \r\n                              className=\"bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors font-semibold\"\r\n                            >\r\n                              ✅ Accept Counter-Offer\r\n                            </button>\r\n                            <button \r\n                              onClick={() => handleBidderResponse('rejected')} \r\n                              className=\"bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition-colors font-semibold\"\r\n                            >\r\n                              ❌ Reject Counter-Offer\r\n                            </button>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                      {postBidAction.action_type === 'pending' && (\r\n                        <div className=\"text-yellow-700\">\r\n                          <h4 className=\"text-lg font-bold mb-2\">⏳ Waiting for Seller's Response</h4>\r\n                          <p className=\"text-sm\">The seller is reviewing your bid of ${highestBid}</p>\r\n                          <div className=\"mt-4\">\r\n                            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-600 mx-auto\"></div>\r\n                            <p className=\"text-xs mt-2 text-yellow-600\">Please wait...</p>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  // Show completed action status - this will show the final result\r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-blue-700\">\r\n                      {postBidAction.action_type === 'accepted' && (\r\n                        <div>\r\n                          <h4 className=\"text-lg font-bold mb-2 text-green-700\">✅ Deal Completed!</h4>\r\n                          <p className=\"text-green-600\">Bid accepted by seller</p>\r\n                          {postBidAction.message && (\r\n                            <p className=\"text-sm text-gray-600 mt-2\">{postBidAction.message}</p>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                      {postBidAction.action_type === 'rejected' && (\r\n                        <div>\r\n                          <h4 className=\"text-lg font-bold mb-2 text-red-700\">❌ Deal Declined</h4>\r\n                          <p className=\"text-red-600\">Bid rejected by seller</p>\r\n                          {postBidAction.message && (\r\n                            <p className=\"text-sm text-gray-600 mt-2\">{postBidAction.message}</p>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                      {postBidAction.action_type === 'counter_offer' && (\r\n                        <div>\r\n                          <h4 className=\"text-lg font-bold mb-2 text-blue-700\">💰 Counter-Offer: ${postBidAction.counter_amount}</h4>\r\n                          {postBidAction.message && (\r\n                            <p className=\"text-sm text-gray-600 mt-2\">{postBidAction.message}</p>\r\n                          )}\r\n                          {postBidAction.status === 'completed' && (\r\n                            <p className=\"text-sm text-gray-600 mt-2\">\r\n                              {postBidAction.message?.includes('accepted') ? '✅ Counter-offer was accepted' : '❌ Counter-offer was rejected'}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"names":[],"mappings":"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","debugId":null}}]
}